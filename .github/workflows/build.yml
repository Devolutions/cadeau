name: build
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'build version number'
        default: "latest"
        required: true
env:
  conan-version: 1.60.0
  target-distro: "ubuntu-18.04"
jobs:
  preflight:
    name: Preflight
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        shell: pwsh
        run: |
          $Version = '${{ github.event.inputs.version }}'
          if ($Version -eq 'latest') {
            $Version = (Get-Date -Format "yyyy.MM.dd") + ".0"
          }
          echo "version=$Version" >> $Env:GITHUB_OUTPUT

  build-native:
    name: Native build
    runs-on: ${{ matrix.runner }}
    needs: [preflight]
    env:
      CONAN_LOGIN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      CONAN_PASSWORD: ${{ secrets.ARTIFACTORY_READ_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        os: [ win, osx, linux ]
        arch: [ x64, arm64 ]
        include:
          - os: win
            runner: windows-2022
          - os: osx
            runner: macos-14
          - os: linux
            runner: ubuntu-22.04

    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Prepare environment
        shell: pwsh
        run: |
          $Version = '${{ needs.preflight.outputs.version }}'
          Write-Host "Version: $Version"
          Set-Content -Path .\VERSION -Value $Version -NoNewLine -Force

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Configure Windows runner
        if: matrix.os == 'win'
        shell: pwsh
        run: |
          choco install ninja 7zip wget
          Install-Module -Name VsDevShell -Force

      - name: Configure macOS runner
        if: matrix.os == 'osx'
        shell: pwsh
        run: |
          brew install ninja
          echo "MACOSX_DEPLOYMENT_TARGET=10.12" >> $Env:GITHUB_ENV

      - name: Configure Linux runner
        if: matrix.os == 'linux'
        shell: pwsh
        run: |
          sudo apt update
          sudo apt install xz-utils ninja-build

      - name: Setup LLVM
        uses: Devolutions/actions-public/setup-llvm@v1
        with:
          version: "14.0.6"
          prebuilt_version: "v2023.1.0"
          add_to_path: true
          set_llvm_dir: true

      - name: Setup Halide
        uses: Devolutions/actions-public/setup-halide@v1
        with:
          version: "14.0.0"
          prebuilt_version: "v2023.1.0"

      - name: Setup CBake
        uses: Devolutions/actions-public/setup-cbake@v1
        if: matrix.os == 'linux'
        with:
          sysroots: |
            - ${{env.target-distro}}-amd64
            - ${{env.target-distro}}-arm64

      - name: Configure conan
        shell: pwsh
        run: |
          pip3 install conan==${{env.conan-version}} --upgrade
          conan config init
          conan config install --type=git -sf settings https://github.com/Devolutions/conan-public
          conan remote clean
          conan remote add artifactory https://devolutions.jfrog.io/devolutions/api/conan/conan-local
          if ($IsLinux) {
            sed -i 's/^distro=.*/distro=${{env.target-distro}}/' ~/.conan/profiles/linux-base
          }

      - name: Build cadeau (${{matrix.os}}-${{matrix.arch}})
        shell: pwsh
        run: |
          $DotNetOs = '${{matrix.os}}'
          $DotNetArch = '${{matrix.arch}}'
          $DotNetRid = '${{matrix.os}}-${{matrix.arch}}'
          $BuildDir = "build-$DotNetRid"
          $NativeDir = ".\runtimes\${DotNetRid}\native"
          Remove-Item -Path $BuildDir -Recurse -ErrorAction SilentlyContinue | Out-Null
          New-Item -Path $BuildDir -ItemType Directory -ErrorAction SilentlyContinue | Out-Null
          New-Item -Path $NativeDir -ItemType Directory -ErrorAction SilentlyContinue | Out-Null

          $InstallPath = ".\install-${DotNetRid}"
          New-Item -Path $InstallPath -ItemType Directory -ErrorAction SilentlyContinue | Out-Null
          
          $CMakeArgs = @("-DCMAKE_BUILD_TYPE=Release")
          $CMakeArgs += @("-DCMAKE_INSTALL_PREFIX=$InstallPath")
          $CMakeArgs += @("-DHALIDE_ROOT_DIR=$($Env:HALIDE_ROOT_DIR)")
          $CMakeArgs += @("-DWITH_XMF=ON", "-DUSE_CONAN=ON")

          if ($DotNetOs -eq 'win') {
            $MsvcArch = @{'x64'='x64';'arm64'='ARM64'}[$DotNetArch]
            Enter-VsDevShell $MsvcArch
            cmake -G Ninja . -B $BuildDir $CMakeArgs
            cmake --build $BuildDir --config Release
            cmake --install $BuildDir --config Release
            Copy-Item "$BuildDir\lib\xmf.dll" "$NativeDir\xmf.dll" -Force
          }
          elseif ($DotNetOs -eq 'osx') {
            $AppleArch = @{'x64'='x86_64';'arm64'='arm64'}[$DotNetArch]
            $CMakeArgs += "-DCMAKE_OSX_ARCHITECTURES=$AppleArch"
            cmake . -G Ninja -B $BuildDir $CMakeArgs
            cmake --build $BuildDir
            cmake --install $BuildDir
            Copy-Item "$BuildDir\lib\libxmf.dylib" "$NativeDir\libxmf.dylib" -Force
          }
          elseif ($DotNetOs -eq 'linux') {
            $LinuxArch = @{'x64'='amd64';'arm64'='arm64'}[$DotNetArch]
            $CMakeToolchainFile = Join-Path $Env:CBAKE_HOME "cmake/linux.toolchain.cmake"
            $CMakeArgs += "-DSYSROOT_NAME=${{env.target-distro}}-$LinuxArch"
            $CMakeArgs += "-DCMAKE_TOOLCHAIN_FILE=$CMakeToolchainFile"
            cmake . -G Ninja -B $BuildDir $CMakeArgs
            cmake --build $BuildDir
            cmake --install $BuildDir
            Copy-Item "$BuildDir\lib\libxmf.so" "$NativeDir\libxmf.so" -Force
          }

      - name: Upload native components (${{matrix.os}}-${{matrix.arch}})
        uses: actions/upload-artifact@v4
        with:
          name: runtimes-${{matrix.os}}-${{matrix.arch}}
          path: runtimes

  build-universal:
    name: Universal Build
    runs-on: ubuntu-latest
    needs: [preflight, build-native]

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Setup CCTools
        uses: Devolutions/actions-public/setup-cctools@v1

      - name: Download native components
        uses: actions/download-artifact@v4
        with:
          pattern: runtimes-*-*
          merge-multiple: true
          path: runtimes

      - name: merge thin libraries
        shell: pwsh
        run: |
          $LibraryName = "libxmf"
          $OutputPath = "./runtimes/osx-universal/native"
          New-Item -ItemType Directory -Path $OutputPath -ErrorAction SilentlyContinue | Out-Null
          $ThinLibraries = Get-ChildItem "./runtimes/osx-*/native/$LibraryName.dylib" -Exclude "*-universal*" | Select-Object -ExpandProperty FullName
          & 'lipo' '-create' @ThinLibraries '-output' "$OutputPath/$LibraryName.dylib"

      - name: Upload native components
        uses: actions/upload-artifact@v4
        with:
          name: runtimes-all
          path: runtimes

  build-managed:
    name: Managed build
    runs-on: ubuntu-latest
    needs: [preflight, build-native, build-universal]

    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Download native components
        uses: actions/download-artifact@v4
        with:
          name: runtimes-all
          path: runtimes

      - name: Build nuget package
        shell: pwsh
        run: |
          $Version = '${{ needs.preflight.outputs.version }}'
          & dotnet pack .\dotnet\Devolutions.Cadeau -o package /p:Version=$Version

      - name: Upload managed components
        uses: actions/upload-artifact@v4
        with:
          name: cadeau-nupkg
          path: package/*.nupkg
