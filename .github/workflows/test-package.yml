name: Test Package
on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'workflow run id'
        default: "latest"
        required: true

jobs:
  package:
    runs-on: windows-2022
    
    steps:
      - name: Clone project
        uses: actions/checkout@v3

      - name: Import code signing certificate
        shell: pwsh
        run: |
          $AuthenticodePath = "~\Documents\Authenticode"
          New-Item -ItemType Directory -Path $AuthenticodePath -ErrorAction SilentlyContinue | Out-Null
          $TestCertsUrl = "https://raw.githubusercontent.com/Devolutions/devolutions-authenticode/master/data/certs"
          @('authenticode-test-ca.crt','authenticode-test-cert.pfx') | ForEach-Object {
              Invoke-WebRequest -Uri "$TestCertsUrl/$_" -OutFile $AuthenticodePath\$_
          }
          Import-Certificate -FilePath "$AuthenticodePath\authenticode-test-ca.crt" -CertStoreLocation "cert:\LocalMachine\Root"
          $CodeSignPassword = ConvertTo-SecureString "CodeSign123!" -AsPlainText -Force
          Import-PfxCertificate -FilePath "$AuthenticodePath\authenticode-test-cert.pfx" -CertStoreLocation 'cert:\CurrentUser\My' -Password $CodeSignPassword

          $CodesignThumbprint = Get-ChildItem cert:\CurrentUser\My -CodeSigning | Select-Object -First 1 -ExpandProperty Thumbprint
          echo "CODESIGN_THUMBPRINT=$CodesignThumbprint" >> $Env:GITHUB_ENV
          echo "TIMESTAMP_SERVER=http://timestamp.digicert.com" >> $Env:GITHUB_ENV

      - name: Code sign package
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $RunId = '${{ github.event.inputs.run_id }}'
          if ($RunId -eq 'latest') {
            $RunId = $(gh run list -w 'build' --json 'status,databaseId,conclusion') |
              ConvertFrom-Json | Where-Object { ($_.status -eq 'completed') -and ($_.conclusion -eq 'success') } |
              Select-Object -First 1 -ExpandProperty databaseId
          }
          
          New-Item -Path "package" -ItemType Directory -ErrorAction SilentlyContinue | Out-Null
          Set-Location "package"

          Write-Host "Downloading run $RunId"
          & gh run download $RunId -n 'cadeau-nupkg'
          $NupkgFile = Get-Item .\Devolutions.Cadeau.*.nupkg
          $NugetName = $NupkgFile.BaseName
          $NugetVersion = $NugetName -Replace 'Devolutions.Cadeau.', ''
          Expand-Archive -Path $NupkgFile -Destination ".\$NugetName"
          Remove-Item $NupkgFile -ErrorAction SilentlyContinue | Out-Null

          $TimestampServer = $Env:TIMESTAMP_SERVER
          $Certificate = Get-Item cert:\CurrentUser\My\$Env:CODESIGN_THUMBPRINT
          Get-Item -Path ".\$NugetName\runtimes\win-*\native\*.dll" | ForEach-Object {
            Set-AuthenticodeSignature -Certificate $Certificate -TimestampServer $TimestampServer -HashAlgorithm SHA256 $_
          }

          Compress-Archive -Path ".\$NugetName\*" -DestinationPath $NupkgFile -CompressionLevel Optimal
          Remove-Item ".\$NugetName" -Recurse

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: cadeau-nupkg
          path: package/*.nupkg
