cmake_minimum_required(VERSION 3.0)

project(xpp-halide-generator CXX)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_BINARY_DIR})

if(NOT HALIDE_ROOT_DIR)
    message(FATAL_ERROR "HALIDE_ROOT_DIR is not specified")
endif()

set(HALIDE_INCLUDE_DIR "${HALIDE_ROOT_DIR}/include")
set(HALIDE_LIBRARY_DIR "${HALIDE_ROOT_DIR}/lib")

if(CMAKE_HOST_SYSTEM_NAME STREQUAL Windows)
    set(HALIDE_HOST "windows")
    set(HALIDE_LINK_LIBRARY "Halide.lib")
    set(HALIDE_RUNTIME_LIBRARY "Halide.dll")
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL Darwin)
    set(HALIDE_HOST "osx")
    set(HALIDE_LINK_LIBRARY "libHalide.dylib")
    set(HALIDE_RUNTIME_LIBRARY "libHalide.dylib")
else()
    set(HALIDE_HOST "linux")
    set(HALIDE_LINK_LIBRARY "libHalide.so")
    set(HALIDE_RUNTIME_LIBRARY "libHalide.so")
endif()

add_executable(xpp-halide-generator generator.cpp)

include_directories(xpp-halide-generator ${HALIDE_INCLUDE_DIR})

target_link_libraries(xpp-halide-generator "${HALIDE_LIBRARY_DIR}/${HALIDE_LINK_LIBRARY}")

add_custom_command(TARGET xpp-halide-generator POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different "${HALIDE_LIBRARY_DIR}/${HALIDE_RUNTIME_LIBRARY}" ${HALIDE_RUNTIME_LIBRARY})
