
if(CMAKE_HOST_SYSTEM_NAME STREQUAL Windows)
    set(HALIDE_GENERATOR_TARGET "x86_64-pc-windows-msvc")
    set(HALIDE_SHARED_LIBRARY "Halide.dll")
    set(HALIDE_OBJECT_SUFFIX ".obj")
    set(HALIDE_HOST "windows")
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL Darwin)
    set(HALIDE_GENERATOR_TARGET "x86_64-apple-darwin")
    set(HALIDE_SHARED_LIBRARY "libHalide.dylib")
    set(HALIDE_OBJECT_SUFFIX ".o")
    set(HALIDE_HOST "osx")
else()
    set(HALIDE_GENERATOR_TARGET "x86_64-unknown-linux-gnu")
    set(HALIDE_SHARED_LIBRARY "libHalide.so")
    set(HALIDE_OBJECT_SUFFIX ".o")
    set(HALIDE_HOST "linux")
endif()

if(IOS)
    set(HALIDE_TARGET "ios")
    set(HALIDE_OBJECT_SUFFIX ".o")
elseif(ANDROID)
    set(HALIDE_TARGET "android")
    set(HALIDE_OBJECT_SUFFIX ".o")
else()
    set(HALIDE_TARGET "${HALIDE_HOST}")
endif()

set(HALIDE_GENERATOR_NAME "xpp-halide-generator")
if(CMAKE_HOST_SYSTEM_NAME STREQUAL Windows)
    set(HALIDE_GENERATOR_NAME "${HALIDE_GENERATOR_NAME}.exe")
endif()
set(HALIDE_GENERATOR_SOURCES "generator.cpp")
set(HALIDE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/generated/halide")
set(HALIDE_GENERATOR_EXECUTABLE "${HALIDE_OUTPUT_PATH}/${HALIDE_GENERATOR_NAME}")

set(HALIDE_CMAKE_COMMAND "${CMAKE_COMMAND};-E;env")
list(APPEND HALIDE_CMAKE_COMMAND "--unset=CMAKE_TOOLCHAIN_FILE")
list(APPEND HALIDE_CMAKE_COMMAND "--unset=CMAKE_OSX_ARCHITECTURES")
list(APPEND HALIDE_CMAKE_COMMAND "${CMAKE_COMMAND}")
if(CMAKE_HOST_SYSTEM_NAME STREQUAL Windows)
    list(APPEND HALIDE_CMAKE_COMMAND "-G;Visual Studio 17 2022;-A;x64")
endif()
list(APPEND HALIDE_CMAKE_COMMAND "-DHALIDE_ROOT_DIR=${HALIDE_ROOT_DIR}")
list(APPEND HALIDE_CMAKE_COMMAND "-S;${CMAKE_CURRENT_SOURCE_DIR}/generator")
list(APPEND HALIDE_CMAKE_COMMAND "-B;${HALIDE_OUTPUT_PATH}")

set(HALIDE_BUILD_COMMAND "${CMAKE_COMMAND};--build;${HALIDE_OUTPUT_PATH}")
if(CMAKE_HOST_SYSTEM_NAME STREQUAL Windows)
    list(APPEND HALIDE_BUILD_COMMAND "--config;Release")
endif()

add_custom_command(
    COMMAND ${HALIDE_CMAKE_COMMAND}
    COMMAND ${HALIDE_BUILD_COMMAND}
    OUTPUT ${HALIDE_GENERATOR_EXECUTABLE}
    DEPENDS ${HALIDE_GENERATOR_SOURCES})

if(CMAKE_OSX_ARCHITECTURES)
    foreach(CMAKE_OSX_ARCHITECTURE ${CMAKE_OSX_ARCHITECTURES})
        if(CMAKE_OSX_ARCHITECTURE STREQUAL "i386")
            list(APPEND HALIDE_ARCHS "x86-32")
        elseif(CMAKE_OSX_ARCHITECTURE STREQUAL "x86_64")
            list(APPEND HALIDE_ARCHS "x86-64")
        elseif(CMAKE_OSX_ARCHITECTURE STREQUAL "armv7")
            list(APPEND HALIDE_ARCHS "arm-32")
        elseif(CMAKE_OSX_ARCHITECTURE STREQUAL "armv7s")
            list(APPEND HALIDE_ARCHS "arm-32-armv7s")
        elseif(CMAKE_OSX_ARCHITECTURE STREQUAL "arm64")
            list(APPEND HALIDE_ARCHS "arm-64")
        endif()
    endforeach()
elseif(ANDROID)
    if(ANDROID_SYSROOT_ABI STREQUAL "x86")
        list(APPEND HALIDE_ARCHS "x86-32")
    elseif(ANDROID_SYSROOT_ABI STREQUAL "x86_64")
        list(APPEND HALIDE_ARCHS "x86-64")
    elseif(ANDROID_SYSROOT_ABI STREQUAL "arm")
        list(APPEND HALIDE_ARCHS "arm-32")
    elseif(ANDROID_SYSROOT_ABI STREQUAL "arm64")
        list(APPEND HALIDE_ARCHS "arm-64")
    endif()
else()
    if(WIN32)
        if(DEFINED CMAKE_GENERATOR_PLATFORM AND CMAKE_GENERATOR_PLATFORM)
            set(CMAKE_SYSTEM_PROCESSOR "${CMAKE_GENERATOR_PLATFORM}" CACHE STRING "" FORCE)
        elseif(DEFINED ENV{VSCMD_ARG_TGT_ARCH})
            set(CMAKE_SYSTEM_PROCESSOR "$ENV{VSCMD_ARG_TGT_ARCH}" CACHE STRING "" FORCE)
        endif()
    endif()
    if(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64|arm64|ARM64")
        list(APPEND HALIDE_ARCHS "arm-64")
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|x64|amd64|AMD64")
        list(APPEND HALIDE_ARCHS "x86-64")
    else()
        list(APPEND HALIDE_ARCHS "x86-32")
    endif()
endif()

set(HALIDE_GENERATORS
    RgbToYCoCgR
    YCoCgRToRgb
    RgbToYCoCgR420
    YCoCgR420ToRgb
    Compare8Stage1
    Compare32Stage1
    Copy)

# possibly wrong: generate headers for a given target, and use them for all targets.
# this works as long as there is no real difference between the headers, which seems to be the case.
foreach(HALIDE_GENERATOR ${HALIDE_GENERATORS})
    add_custom_command(COMMAND ${HALIDE_GENERATOR_EXECUTABLE} ARGS
        -g ${HALIDE_GENERATOR} -e h -o "${HALIDE_OUTPUT_PATH}" target=${HALIDE_TARGET}-x86-64-no_runtime
        OUTPUT ${HALIDE_OUTPUT_PATH}/${HALIDE_GENERATOR}.h
        DEPENDS ${HALIDE_GENERATOR_EXECUTABLE})

    list(APPEND HALIDE_GENERATED_HEADERS "${HALIDE_OUTPUT_PATH}/${HALIDE_GENERATOR}.h")
endforeach()

foreach(HALIDE_ARCH ${HALIDE_ARCHS})
    foreach(HALIDE_GENERATOR ${HALIDE_GENERATORS})
        set(BASE_NAME "${HALIDE_GENERATOR}_${HALIDE_ARCH}")

        add_custom_command(COMMAND ${HALIDE_GENERATOR_EXECUTABLE} ARGS
            -g ${HALIDE_GENERATOR} -e h -o "${HALIDE_OUTPUT_PATH}" -n ${BASE_NAME}
            target=${HALIDE_TARGET}-${HALIDE_ARCH}-no_runtime
            OUTPUT ${HALIDE_OUTPUT_PATH}/${BASE_NAME}.h
            DEPENDS ${HALIDE_GENERATOR_EXECUTABLE})

        list(APPEND HALIDE_GENERATED_HEADERS "${HALIDE_OUTPUT_PATH}/${BASE_NAME}.h")

        add_custom_command(COMMAND ${HALIDE_GENERATOR_EXECUTABLE} ARGS
            -g ${HALIDE_GENERATOR} -e o -o "${HALIDE_OUTPUT_PATH}" -n ${BASE_NAME}
            target=${HALIDE_TARGET}-${HALIDE_ARCH}-no_runtime
            OUTPUT ${HALIDE_OUTPUT_PATH}/${BASE_NAME}${HALIDE_OBJECT_SUFFIX}
            DEPENDS ${HALIDE_GENERATOR_EXECUTABLE})

        list(APPEND HALIDE_GENERATED_OBJECTS "${HALIDE_OUTPUT_PATH}/${BASE_NAME}${HALIDE_OBJECT_SUFFIX}")
    endforeach()

    add_custom_command(COMMAND ${HALIDE_GENERATOR_EXECUTABLE} ARGS
        -r "halide_runtime_${HALIDE_ARCH}" -e o -o "${HALIDE_OUTPUT_PATH}" target=${HALIDE_TARGET}-${HALIDE_ARCH}
        OUTPUT ${HALIDE_OUTPUT_PATH}/halide_runtime_${HALIDE_ARCH}${HALIDE_OBJECT_SUFFIX}
        DEPENDS ${HALIDE_GENERATOR_EXECUTABLE})

    list(APPEND HALIDE_GENERATED_OBJECTS "${HALIDE_OUTPUT_PATH}/halide_runtime_${HALIDE_ARCH}${HALIDE_OBJECT_SUFFIX}")
endforeach()

list(REMOVE_DUPLICATES HALIDE_GENERATED_HEADERS)

add_custom_target(halide-generate-all ALL DEPENDS ${HALIDE_GENERATOR_EXECUTABLE} ${HALIDE_GENERATED_HEADERS} ${HALIDE_GENERATED_OBJECTS})

set(HALIDE_GENERATED_HEADERS ${HALIDE_GENERATED_HEADERS} PARENT_SCOPE)
set(HALIDE_GENERATED_OBJECTS ${HALIDE_GENERATED_OBJECTS} PARENT_SCOPE)
